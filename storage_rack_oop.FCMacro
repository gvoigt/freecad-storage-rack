import Part
from FreeCAD import Base

doc = App.newDocument('Storage Rack')

class Storage_Rack():
	"""\n This class shall be used .... \n"""

	def __init__(self, rack_width, rack_height, rack_depth, wood_thickness, num_shelves):
		self.width     = rack_width
		self.height    = rack_height
		self.depth	   = rack_depth 
		self.thickness = wood_thickness
		self.shelves   = num_shelves

		self.create_rack()

	def create_rack(self):
		self.parts = {}
		self.parts['bottom shelf'] = self.create_board(self.width, self.depth, self.thickness)
		self.parts['top shelf'] = self.parts['bottom shelf'].mirror(Base.Vector(0,0,self.height/2), Base.Vector(0,0,1))

		self.parts['left side'] = self.create_board(self.height, self.depth, self.thickness)
		self.parts['left side'].rotate(Base.Vector(0,0,0),Base.Vector(0,1,0),270)
		self.parts['left side'].rotate(Base.Vector(0,self.depth/2,0), Base.Vector(0,0,1),180)

		self.parts['right side'] = self.parts['left side'].mirror(Base.Vector(self.width/2, 0,0), Base.Vector(1,0,0))
		
		self.make_shelves()
		
	def make_shelves(self):
		
		if self.shelves >= 1:
			for i in range(1,self.shelves+1):
				shelf_name = 'shelf '+str(i)
				dowel_name = 'dowel '+str(i)
				move_z = i*self.height/(self.shelves+1)
				self.parts[shelf_name] = Part.makeBox(self.width-2*self.thickness, self.depth, self.thickness)
				self.parts[shelf_name].Placement.Base = Base.Vector(self.thickness, 0, move_z-self.thickness/2)

				# create dowels (4 pieces)

				dowel_length = 20
				dowel_radius = 4
				drill_length    = dowel_length + 4

				dowel = Part.makeCylinder(dowel_radius,dowel_length,Base.Vector(0,0,0),Base.Vector(1,0,0), 360)
				dowel = dowel.makeChamfer(1,[dowel.Edge1,dowel.Edge3])
				dowel.Placement.Base = Base.Vector(self.thickness-dowel_length/2, 50, move_z)
				dowel2 = dowel.mirror(Base.Vector(0,self.depth/2,0), Base.Vector(0,1,0))
				dowel = dowel.fuse(dowel2)
				dowel2 = dowel.mirror(Base.Vector(self.width/2,0,0), Base.Vector(1,0,0))
				dowel = dowel.fuse(dowel2)
				self.parts[dowel_name] = dowel 

				# drill for the dowels
				drill = Part.makeCylinder(dowel_radius,drill_length,Base.Vector(0,0,0),Base.Vector(1,0,0), 360)
				drill.Placement.Base = Base.Vector(self.thickness-drill_length/2, 50, move_z)
				drill2 = drill.mirror(Base.Vector(0,self.depth/2,0), Base.Vector(0,1,0))
				drill = drill.fuse(drill2)
				drill2 = drill.mirror(Base.Vector(self.width/2,0,0), Base.Vector(1,0,0))
				drill = drill.fuse(drill2)

				self.parts['left side'] = self.parts['left side'].cut(drill)
				self.parts['right side'] = self.parts['right side'].cut(drill)
				self.parts[shelf_name] = self.parts[shelf_name].cut(drill)


	def create_board(self, board_width, board_depth, board_thickness):
		board = Part.makeBox(board_width, board_depth, board_thickness)

		V1 = Base.Vector(0,0,0)
		V2 = Base.Vector(0,0,board_thickness)
		V3 = Base.Vector(board_thickness,0,board_thickness)
		miter_left = Part.makePolygon([ V1,V2,V3,V1])
		miter_left = Part.Face(miter_left)
		miter_left = miter_left.extrude(Base.Vector(0,board_depth,0))

		miter_right = miter_left.mirror(Base.Vector(board_width/2,0,0), Base.Vector(1,0,0))

		miter = miter_left.fuse(miter_right)

		return board.cut(miter)
		
	def move_board(self, move_x, move_y, move_z):
		for key in self.parts:
			original_pos = self.parts[key].Placement.Base
			self.parts[key].Placement.Base = Base.Vector(move_x, move_y, move_z) + original_pos


class Work_Surface():
	"""  \n"""
	
	def __init__(self, wood_thickness, blinds_width, surface_underside):
		self.left_width 	  = 1020
		self.depth 			  = 605
		self.thickness		  = wood_thickness
		self.blind_width 	  = blinds_width
		self.underside_height = surface_underside
		
		self.parts_left = {}
		self.parts_left['top'] = self.create_top_left()
		
		self.make_blinds_left()
		
		self.parts_left['top'].Placement.Base = Base.Vector(0,0,self.thickness)
		self.move_parts(self.parts_left,0,0,self.underside_height)
		
	def create_top_left(self):
		plain_board = Part.makeBox(self.left_width, self.depth, self.thickness)
		
		V1 = plain_board.Vertex2.Point
		V2 = plain_board.Vertex4.Point
		V3 = V2 + Base.Vector(560,0,0)
		cut_edge = Part.makePolygon([ V1,V2,V3,V1])		
		cut_edge = Part.Face(cut_edge)
		cut_edge = cut_edge.extrude(Base.Vector(0,0,self.thickness))
		
		
		
		V4 = V2 + Base.Vector(0,-250,0)
		V5 = V4 + Base.Vector(437.5,0,0)
		V6 = V5 + Base.Vector(0,-35,0)
		V7 = V4 + Base.Vector(0,-35,0)
		
		VC1 = V5 + Base.Vector(17.5,-17.5,0)
		
		L1 = Part.Line(V4,V5)
		C1 = Part.Arc(V5,VC1,V6)
		L2 = Part.Line(V6,V7)
		L3 = Part.Line(V7,V4)
		
		S1 = Part.Shape([C1,L1,L2,L3])

		opening = Part.Wire(S1.Edges)
		opening = Part.Face(opening)
		opening = opening.extrude(Base.Vector(0,0,self.thickness))
		
		top_left = plain_board.cut(cut_edge)
		top_left = top_left.cut(opening)
		
		return top_left
		
	def make_blinds_left(self):
		blind_front = Part.makeBox(self.left_width, self.blind_width, self.thickness)
		blind_front = blind_front.common(self.parts_left['top'])
		
		V1 = blind_front.Vertex2.Point
		V2 = blind_front.Vertex6.Point
		V3 = V2 + Base.Vector(-self.blind_width,0,0)
		
		miter = Part.makePolygon([ V1,V2,V3,V1])		
		miter = Part.Face(miter)
		miter = miter.extrude(Base.Vector(0,0,self.thickness))
		
		blind_front = blind_front.cut(miter)
		
		self.parts_left['blind front'] = blind_front
		
		blind_side = Part.makeBox(self.blind_width, self.depth, self.thickness)
		blind_side.Placement.Base = Base.Vector(self.left_width-self.blind_width, 0,0)
		blind_side = blind_side.cut(blind_front)
		
		self.parts_left['blind side'] = blind_side
		
		
		
		
	def move_parts(self, parts, move_x, move_y, move_z):
		for key in parts:
			original_pos = parts[key].Placement.Base
			print(original_pos)
			parts[key].Placement.Base = Base.Vector(move_x, move_y, move_z) + original_pos
			print(parts[key].Placement.Base)
			


#~ new_rack = Storage_Rack(1500,500,300,18,2)
#~ new_rack.move_board(150,-50,100)

#~ for key in new_rack.parts:
	#~ doc.addObject("Part::Feature",key).Shape = new_rack.parts[key]	

#~ print(new_rack.parts['right side'].Placement.Base)

surface= Work_Surface(18,50,825)

for key in surface.parts_left:
	doc.addObject("Part::Feature",key).Shape = surface.parts_left[key]	

Gui.SendMsgToActiveView("ViewFit")
Gui.ActiveDocument.ActiveView.setAxisCross(True)
Gui.activeDocument().activeView().viewAxometric()
